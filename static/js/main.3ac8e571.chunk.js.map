{"version":3,"sources":["components/new-todo.js","components/todo-item.js","components/todo-list.js","components/const/filter.js","components/todo-footer.js","App.js","index.js"],"names":["NewTodo","state","title","handleChange","target","setState","value","handleSubmit","e","preventDefault","addTodo","props","trim","id","uuid","completed","this","onSubmit","type","className","placeholder","onChange","Component","TodoItem","todo","deleteTodo","checkTodo","checked","htmlFor","onClick","TodoList","todos","map","key","filterTypes","all","active","Footer","count","activeFilter","onSetFilter","onClearCompleted","Object","values","App","prevState","todoId","filter","clearAllCompleted","setFilter","filterTodos","toggleAll","every","storedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filteredTodos","checkComplete","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ac8e571.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nclass NewTodo extends Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { title } = this.state;\n    const { addTodo } = this.props;\n\n    if (title.trim() === '') {\n      return;\n    }\n\n    addTodo({\n      title,\n      id: uuid(),\n      completed: false,\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"Enter your task\"\n          value={title}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo, deleteTodo, checkTodo }) => (\n  <li className={todo.completed ? 'completed' : ''}>\n    <div>\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={todo.id}\n        onChange={({ target }) => checkTodo(target.checked)}\n        checked={todo.completed}\n      />\n      <label\n        htmlFor={todo.id}\n        className={todo.completed ? 'checked' : ''}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={deleteTodo}\n      />\n    </div>\n    <input\n      type=\"text\"\n      className=\"edit\"\n    />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './todo-item';\n\nconst TodoList = ({ todos, deleteTodo, checkTodo }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        deleteTodo={() => deleteTodo(todo.id)}\n        checkTodo={checked => checkTodo(todo.id, checked)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","const filterTypes = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n\nexport default filterTypes;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport filterTypes from './const/filter';\n\nconst Footer = ({ count, activeFilter, onSetFilter, onClearCompleted }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {`${count} tasks left`}\n    </span>\n    <ul className=\"filters\">\n      {Object.values(filterTypes).map(type => (\n        <li key={type}>\n          <button\n            type=\"button\"\n            className={activeFilter === type ? 'selected' : ''}\n            onClick={() => onSetFilter(type)}\n          >\n            {type}\n          </button>\n        </li>\n      ))}\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={onClearCompleted}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  count: PropTypes.number.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport NewTodo from './components/new-todo';\nimport TodoList from './components/todo-list';\nimport Footer from './components/todo-footer';\nimport filterTypes from './components/const/filter';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    activeFilter: filterTypes.all,\n  }\n\n  componentDidMount() {\n    const storedTodos = localStorage.getItem('todos');\n\n    if (storedTodos) {\n      const todos = JSON.parse(storedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  setFilter = (filter) => {\n    this.setState({\n      activeFilter: filter,\n    });\n  }\n\n  filterTodos = () => {\n    const { todos, activeFilter } = this.state;\n\n    switch (activeFilter) {\n      case filterTypes.all:\n        return [...todos];\n      case filterTypes.active:\n        return todos.filter(todo => !todo.completed);\n      case filterTypes.completed:\n        return todos.filter(todo => todo.completed);\n      default:\n        return [...todos];\n    }\n  }\n\n  checkTodo = (id, checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: checked,\n        };\n      }),\n    }));\n  }\n\n  toggleAll = () => {\n    const { todos } = this.state;\n\n    this.setState((prevState) => {\n      if (todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  }\n\n  render() {\n    const { todos, activeFilter } = this.state;\n    const filteredTodos = this.filterTodos();\n    const checkComplete = todos.every(todo => todo.completed);\n    const count = todos.filter(todo => !todo.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n        <main className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.toggleAll}\n            checked={checkComplete}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.deleteTodo}\n            checkTodo={this.checkTodo}\n          />\n        </main>\n        <Footer\n          count={count}\n          activeFilter={activeFilter}\n          onSetFilter={this.setFilter}\n          onClearCompleted={this.clearAllCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}